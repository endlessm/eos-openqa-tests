#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright Â© 2018 Endless Mobile, Inc.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 USA

import argparse
import eibimageserver
import eibopenqaserver
import logging
import sys


# OpenQA server hostname.
OPENQA_SERVER_HOST = 'openqa.endlessos.org'
# URI providing help on client.conf.
OPENQA_CLIENT_HELP_URI = 'http://open.qa/docs/#_using_the_client_script'


logger = logging.getLogger(__name__)


def load_image_data_for_branch(branch, release=False, token=None):
    """
    Download manifest file from the image server for the latest release on the
    given branch, using default values for all the other parameters.

    Return it as a Python object.
    If there are no matching releases on the given branch, return None.
    """
    builds = eibimageserver.query_builds(
        token=token,
        product='eos',
        branch=branch,
        arch='amd64',
        platform='amd64',
        personality='base',
        release=release,
        limit=1,
    )

    if builds['count'] == 0:
        return None

    build = builds['results'][0]
    data = {}

    for path in build['files']:
        asset_type = None
        if path.endswith('.img.gz') or path.endswith('.img.xz'):
            asset_type = 'full'
        elif path.endswith('.iso'):
            asset_type = 'iso'

        if asset_type:
            asset = eibimageserver.query_file(path)
            data[asset_type] = asset['download_url']

    data['manifest'] = eibimageserver.query_manifest(build['id'])['data']

    return data


def main():
    client_conf_file = eibopenqaserver.get_client_config_path()

    # Parse command line arguments.
    parser = argparse.ArgumentParser(
        description=(
            'Schedule OpenQA test runs for a given image branch. '
            'Tests will be scheduled for all the images in the latest build '
            'from that branch.\n'
            '\n'
            'API configuration should be put in {}. See {} for help.'
            .format(client_conf_file, OPENQA_CLIENT_HELP_URI)
        ),
    )
    parser.add_argument('branch', help='OS branch')
    parser.add_argument('-n', '--dry-run', action='store_true',
                        help='Only show what would be done')
    parser.add_argument('--api-key', required=False, default='',
                        help='OpenQA API key (default: load from '
                             '{})'.format(client_conf_file))
    parser.add_argument('--api-secret', required=False, default='',
                        help='OpenQA API secret (default: load from '
                             '{})'.format(client_conf_file))
    parser.add_argument('--openqa-host', default=OPENQA_SERVER_HOST,
                        help='OpenQA server hostname (default: %(default)s)')

    args = parser.parse_args()

    logging.basicConfig(level='DEBUG')

    # API key/secret provided on the command line override the config file.
    if args.api_key and args.api_secret:
        api_key = args.api_key
        api_secret = args.api_secret
    else:
        try:
            api_key, api_secret = eibopenqaserver.get_credentials(
                args.openqa_host,
            )
        except eibopenqaserver.OpenQAError:
            print(
                'An --api-key and --api-secret must be provided, or specified '
                f'in {client_conf_file}.\nSee {OPENQA_CLIENT_HELP_URI}.',
                file=sys.stderr
            )
            sys.exit(1)

    # Fetch the image data.
    image_data = load_image_data_for_branch(args.branch)

    # OpenQA server ISO REST API.
    openqa_endpoint = f'https://{args.openqa_host}/api/v1/isos'
    if 'full' in image_data:
        eibopenqaserver.send_request_for_image('full',
                                               image_data['full'],
                                               image_data['manifest'],
                                               openqa_endpoint,
                                               api_key, api_secret,
                                               dry_run=args.dry_run)
    if 'iso' in image_data:
        eibopenqaserver.send_request_for_image('iso',
                                               image_data['iso'],
                                               image_data['manifest'],
                                               openqa_endpoint,
                                               api_key, api_secret,
                                               dry_run=args.dry_run)


if __name__ == '__main__':
    main()
